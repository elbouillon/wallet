// Generated by CoffeeScript 1.10.0
(function() {
  var EntryForm, ExpenseChart, Tags,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EntryForm = (function() {
    function EntryForm() {
      this._handleTagCombinationClick = bind(this._handleTagCombinationClick, this);
      this._handleCopyAccountedOn = bind(this._handleCopyAccountedOn, this);
      this._handleAmountInput = bind(this._handleAmountInput, this);
      this._handleIncomeButtonClick = bind(this._handleIncomeButtonClick, this);
      this._handleExpenseButtonClick = bind(this._handleExpenseButtonClick, this);
      this.expenseButton = $('.js-expense');
      this.incomeButton = $('.js-income');
      this.amount = $('.js-amount');
      this.accountedOnInput = $('#entry-accounted_on');
      this.dateInput = $('#entry-date');
      this.copyAccountedOn = $('.js-copy-accounted-on');
      this.tagCombinations = $('.js-tag-combination');
      this.expenseButton.on('click', this._handleExpenseButtonClick);
      this.incomeButton.on('click', this._handleIncomeButtonClick);
      this.amount.on('input', this._handleAmountInput);
      this.copyAccountedOn.on('click', this._handleCopyAccountedOn);
      this.tagCombinations.on('click', this._handleTagCombinationClick);
      this.select = $('.js-selectize').selectize();
    }

    EntryForm.prototype._handleExpenseButtonClick = function() {
      var value;
      value = Number(this.amount.val());
      if (value > 0) {
        this.amount.val(-value);
      }
      this.amount.data('type', 'expense').focus();
      this.expenseButton.addClass('btn-danger active').removeClass('btn-default');
      return this.incomeButton.removeClass('btn-success active').addClass('btn-default');
    };

    EntryForm.prototype._handleIncomeButtonClick = function() {
      var value;
      value = Number(this.amount.val());
      if (value < 0) {
        this.amount.val(-value);
      }
      this.amount.data('type', 'income').focus();
      this.incomeButton.addClass('btn-success active').removeClass('btn-default');
      return this.expenseButton.removeClass('btn-danger active').addClass('btn-default');
    };

    EntryForm.prototype._handleAmountInput = function() {
      var number, value;
      value = this.amount.val();
      if (value === '') {
        return;
      }
      number = Number(value);
      if ((this.amount.data('type') === 'expense' && number > 0) || (this.amount.data('type') === 'income' && number < 0)) {
        return this.amount.val(-value);
      }
    };

    EntryForm.prototype._handleCopyAccountedOn = function(e) {
      e.preventDefault();
      return this.dateInput.val(this.accountedOnInput.val()).focus();
    };

    EntryForm.prototype._handleTagCombinationClick = function(e) {
      var $link, tagIds;
      e.preventDefault();
      $link = $(e.currentTarget);
      tagIds = $link.find('[data-tag-id]').map(function(_, tag) {
        return $(tag).data('tag-id');
      }).toArray();
      return this.select[0].selectize.setValue(tagIds);
    };

    return EntryForm;

  })();

  Tags = (function() {
    function Tags() {
      var $tags, tagsHtml;
      $tags = $('.js-tags');
      tagsHtml = $tags.html();
      $tags.sortable({
        axis: 'y',
        containment: 'parent',
        handle: '.js-sortable-handle',
        tolerance: 'pointer',
        update: function() {
          var changes;
          changes = {};
          $tags.find('li').each(function(i) {
            var $tag, newPosition, oldPosition;
            newPosition = i + 1;
            $tag = $(this);
            oldPosition = $tag.data('position');
            if (newPosition === oldPosition) {
              return;
            }
            $tag.attr('data-position', newPosition);
            return changes[$tag.data('id')] = newPosition;
          });
          if ($.isEmptyObject(changes)) {
            return;
          }
          return $.ajax($tags.data('path'), {
            method: 'POST',
            data: {
              positions: changes
            },
            error: function() {
              return $tags.html(tagsHtml);
            },
            success: function() {
              return tagsHtml = $tags.html();
            }
          });
        }
      });
    }

    return Tags;

  })();

  ExpenseChart = (function() {
    function ExpenseChart() {
      this.element = $('#chart');
      if (!this.element.length) {
        return;
      }
      this.init();
    }

    ExpenseChart.prototype.init = function() {
      var chart;
      return chart = c3.generate({
        bindto: this.element[0],
        data: {
          type: 'bar',
          url: this.element.data('url'),
          mimeType: 'json'
        }
      });
    };

    return ExpenseChart;

  })();

  $(function() {
    new EntryForm;
    new Tags;
    return new ExpenseChart;
  });

}).call(this);
